pipeline {
  agent {
    docker {

      image 'ashaik65/maven-anis-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'

      }
    }
  

        stage('Build and Test') {
      steps {
        sh 'ls -ltr'

        sh 'cd jenkins-argocd/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.164.41.51:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd jenkins-argocd/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

     stage('Build and Push Docker Image') {
      environment {
          
    DOCKER_IMAGE = "paddy6078/argocd-app:${BUILD_NUMBER}"

        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd jenkins-argocd/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
              docker.withRegistry('https://registry.hub.docker.com', "docker-cred")  {
                dockerImage.push()
            }
        }
      }
    }

  }
   
}




  
